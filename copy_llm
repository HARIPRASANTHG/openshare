#!/bin/bash

# Directory to monitor
WATCH_DIR="/path/to/your/directory"

# Path to the converter script
CONVERTER_SCRIPT="/path/to/convertor.sh"

# Interval for checking file size (in seconds)
CHECK_INTERVAL=2

# Log file for tracking progress and errors
LOG_FILE="/path/to/convertor.log"

# Ensure required paths and files exist
if [ ! -d "$WATCH_DIR" ]; then
    echo "Error: Directory $WATCH_DIR does not exist." | tee -a "$LOG_FILE"
    exit 1
fi

if [ ! -x "$CONVERTER_SCRIPT" ]; then
    echo "Error: Converter script $CONVERTER_SCRIPT is not executable or not found." | tee -a "$LOG_FILE"
    exit 1
fi

# Function to clean up on exit
cleanup() {
    echo "Script interrupted. Cleaning up temporary files..." | tee -a "$LOG_FILE"
    rm -f "$WATCH_DIR"/*.lock
    exit 0
}

# Trap signals for cleanup
trap cleanup SIGINT SIGTERM

# Start monitoring the directory
echo "Starting directory monitoring on $WATCH_DIR" | tee -a "$LOG_FILE"
while true; do
    # Iterate through all .jt files in the directory
    for file in "$WATCH_DIR"/*.jt; do
        # Skip if no files match the pattern
        [ -e "$file" ] || continue

        # Define the flag file and lock file paths
        flag_file="${file}.processed"
        lock_file="${file}.lock"

        # Skip files that already have a flag file
        if [ -e "$flag_file" ]; then
            echo "Skipping already processed file: $file" >> "$LOG_FILE"
            continue
        fi

        # Skip files currently being processed
        if [ -e "$lock_file" ]; then
            echo "File $file is already being processed. Skipping..." >> "$LOG_FILE"
            continue
        fi

        # Create a lock file to prevent duplicate processing
        touch "$lock_file"

        # Check the file size
        size1=$(stat --printf="%s" "$file")
        sleep $CHECK_INTERVAL
        size2=$(stat --printf="%s" "$file")

        # If the file size has not changed, it is ready for conversion
        if [ "$size1" -eq "$size2" ]; then
            echo "$(date): File $file is fully generated. Starting conversion..." | tee -a "$LOG_FILE"

            # Run the converter script
            if nohup "$CONVERTER_SCRIPT" "$file" >> "$LOG_FILE" 2>&1; then
                echo "$(date): Conversion successful for $file" | tee -a "$LOG_FILE"
                # Create a flag file to mark the file as processed
                touch "$flag_file"
            else
                echo "$(date): Error during conversion for $file. Check the log for details." | tee -a "$LOG_FILE"
            fi
        else
            echo "$(date): File $file is still growing. Skipping for now..." >> "$LOG_FILE"
        fi

        # Remove the lock file after processing
        rm -f "$lock_file"
    done

    # Wait a moment before repeating the check
    sleep 1
done


######################################

#!/bin/bash

# Directory to monitor
WATCH_DIR="/path/to/your/directory"

# Converter script path
CONVERTER_SCRIPT="/path/to/convertor.sh"

# Delay between size checks (in seconds)
CHECK_INTERVAL=2

# Monitor the directory
while true; do
    # Get the list of .jt files in the directory
    for file in "$WATCH_DIR"/*.jt; do
        # Skip if no files are found
        [ -e "$file" ] || continue

        # Skip if a flag file exists (already processed or sent to the converter)
        flag_file="${file}.processed"
        if [ -e "$flag_file" ]; then
            continue
        fi

        # Check if the file is still growing
        size1=$(stat --printf="%s" "$file")
        sleep $CHECK_INTERVAL
        size2=$(stat --printf="%s" "$file")

        # If the file size is constant, it is ready for conversion
        if [ "$size1" -eq "$size2" ]; then
            echo "File $file is fully generated. Starting conversion..."
            
            # Create a flag file to indicate the file is being processed
            touch "$flag_file"

            # Run the converter script in the background
            nohup "$CONVERTER_SCRIPT" "$file" &

            # Log the processing
            echo "Conversion started for $file"
        fi
    done

    # Pause for a short duration before the next check
    sleep 1
done


######################################

https://chatgpt.com/share/673f5bf7-4e48-8010-a9f5-6ff92f7f4ae0

######################
